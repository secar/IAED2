Variaveis globais:

numero clientes
numero cheques
valor cheques
cheque_mais_antigo
cliente_mais_baixo

hash(cheque) = ref_emi % arraysize

cheque comando_processa(void)
{	
	cheque novo_mais_antigo = sucessor_tempo(cheque_mais_antigo);
	remove_cheque(cheque_mais_antigo);	
	return novo_mais_antigo;	
}

void comando_processaR(unsigned int refc) 
{

	cheque alvo = seek_cheque(refc);
	
	if (alvo == NULL) {

		printf("Cheque %d does not exist", refc);

		return;

	}

	else remove_cheque(alvo);

	return;
}

void comando_infocheque(unsigned int ref) 
{

	cheque alvo = seek_cheque(ref);

	printf("<%ld> <%ld> <%d> --> <%d>\n", ref(alvo), valor(alvo), ref_emi(alvo), ref_ben(alvo));

}

cheque* comando_cheque(long int* valor_dado, long int* refemissor, long int* refbeneficiario, long int* refcheque) {
	
	cheque* novo_cheque;
	
	novo_cheque = (cheque*) malloc(sizeof(cheque));

	novo_cheque->valor = *valor_dado;

	novo_cheque->refe = *refemissor;

	novo_cheque->refb = *refbeneficiario;

	novo_cheque->refc = *refcheque;

	ajusta_emissor(refemissor, valor_dado);

	ajusta_beneficiario(refbeneficiario,  valor_dado);

	return novo_cheque;

}

/* ajusta_emissor vai alterar os valores associados ao emissor dado, caso ele nao exista cria-o.
 
	recebe ponteiros da referencia do emissor e do valor do cheque

*/

ajusta_emissor(long int* refemissor, long int* valor_dado) {

	if (/*emissor nao existe na estrutura de dados*/) {

		cliente* emissor;

		cliente emissor = (cliente*) malloc(sizeof(cliente));

		emissor->ref = refemissor;

		emissor->nche = 1;

		emissor->vche = *valor_dado;

	}

	else {

		emissor = seek_cliente(refemissor);

		(emissor->nche)++ ;

		(emissor->vche) = (emissor->vche) + (*valor_dado);

	}

}

/* ajusta_beneficiario vai alterar os valores associados ao beneficiario dado, caso ele nao exista cria-o.
 
	recebe ponteiros da referencia do beneficiario e do valor do cheque

*/

ajusta_beneficiario(long int* refbeneficiario, long int* valor_dado) {

	if (/*beneficiario nao existe na estrutura de dados*/) {

		cliente* beneficiario;

		cliente emissor = (cliente*) malloc(sizeof(cliente));

		beneficiario->ref = refbeneficiario;

		beneficiario->nchb = 1;

		beneficiario->vchb = *valor_dado;

	}

	else {

		beneficiario = seek_cliente(refbeneficiario);

		(beneficiario->nchb)++ ;

		(beneficiario->vchb) = (beneficiario->vchb) + (*valor_dado);

	}

}










